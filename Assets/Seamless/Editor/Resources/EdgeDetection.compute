/*
 * @file    EdgeDetection.compute
 * @author  Leo Chaumartin
 * @inspired from  https://www.shadertoy.com/view/Xdf3Rf
 */


#pragma kernel EdgeDetection

#include "Common.hlsl"

float Width;
float Height;


RWTexture2D<float4> Output;
Texture2D<float4> Input;

float  uOffset;

// Use these parameters to fiddle with settings
float uStep = 1.0;

float4 fetchInput(float2 aUV)
{
    float2 id = mod(aUV.xy* float2(Width, Height), float2(Width, Height));
    return Input[id.xy];
}

float intensity(in float4 color)
{
	return sqrt((color.x*color.x)+(color.y*color.y)+(color.z*color.z));
}

float3 sobel(float stepx, float stepy, float2 center){
	// get samples around pixel
    float tleft = intensity(fetchInput(center + float2(-stepx,stepy)));
    float left = intensity(fetchInput(center + float2(-stepx,0)));
    float bleft = intensity(fetchInput(center + float2(-stepx,-stepy)));
    float top = intensity(fetchInput(center + float2(0,stepy)));
    float bottom = intensity(fetchInput(center + float2(0,-stepy)));
    float tright = intensity(fetchInput(center + float2(stepx,stepy)));
    float right = intensity(fetchInput(center + float2(stepx,0)));
    float bright = intensity(fetchInput(center + float2(stepx,-stepy)));
 
	// Sobel masks (see http://en.wikipedia.org/wiki/Sobel_operator)
	//        1 0 -1     -1 -2 -1
	//    X = 2 0 -2  Y = 0  0  0
	//        1 0 -1      1  2  1
	
	// You could also use Scharr operator:
	//        3 0 -3        3 10   3
	//    X = 10 0 -10  Y = 0  0   0
	//        3 0 -3        -3 -10 -3
 
    float x = tleft + 2.0*left + bleft - tright - 2.0*right - bright;
    float y = -tleft - 2.0*top - tright + bleft + 2.0 * bottom + bright;
    float color = sqrt((x*x) + (y*y));
    return float3(color,color,color);
 }

[numthreads(8,8,1)]
void EdgeDetection(uint3 id : SV_DispatchThreadID)
{
    float2 lUV = (float2(id.xy) / float2(Width, Height));
    //float4 lInputColor0 = texelFetch(Input0, id, 0);
    float4 lOutputColor = float4(sobel(uStep /Width + uOffset /256.f, uStep / Height + uOffset / 256.f, lUV), 1.0);
    //const float4 lOutputColor = float4(float3(lColorSum.x, lColorSum.y, lColorSum.z), lInputColor0.a);
    Output[id.xy] = clamp(lOutputColor, 0.0, 1.0);
}
